/*
   Copyright (C) $year  by $author <$mail>

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */

#set $classname = $name + 'Plugin'
#raw 
#include #end raw  "${name.lower()}plugin.h"

#raw 
#include #end raw "${name.lower()}plugin_config.h"

#raw 
#include #end raw  "${name.lower()}executive.h"

#raw
#include <KPluginFactory>
#include <KDebug>
#end raw 


K_PLUGIN_FACTORY(${name}PluginFactory, registerPlugin< Nepomuk::${name}Plugin >();)
K_EXPORT_PLUGIN(${name}PluginFactory("webex${name.lower()}plugin"))

Nepomuk::${classname}::${classname}(QObject* parent, const QList<QVariant>&):
    WebExtractorPlugin(parent)
{
    // Usually there is nothing to do here. You may put here something that is common
    // for ALL executives.
    // Usually, infrastructure for network access is NOT what should be put here -
    // for this use your Executive subclass
    // So, if in doubts - dont put anything here
}

int Nepomuk::${classname}::version()
{
    return (${name.upper()}_PLUGIN_INTERNAL_VERSION);
}

Nepomuk::WebExtractor::Executive * Nepomuk::${classname}::getExecutive(const KConfigGroup &  configFile)
{
    kError() << "ATTENTION! Reimplement this! ";
    // In this function you should parse your config file, read necessary parameters
    // create new  Executive with this parameters and return.
    // in included file "${name.lower()}plugin_config.h" there is a define
    // with name ${name.upper()}_CONFIG_GROUP. It is the name of config group
    // you should use:
    // KConfigGroup grp = configFile.group(${name.upper()}_CONFIG_GROUP)
    // read settings from grp.
    // Be aware that in given configFile there are not only your settings, but 
    // also some system settings too
    return new ${name}Executive(version()/* add your parameters here */);
}


